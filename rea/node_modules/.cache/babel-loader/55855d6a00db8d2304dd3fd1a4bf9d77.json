{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, USER_DATA, UPDATE_USER, SET_MESSAGE } from \"./type\";\nimport AuthService from \"../services/auth.service\";\nimport UserService from \"../services/user.service\";\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    const message = {\n      text: \"LoggedIn Success.\",\n      variant: \"success\"\n    };\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.resolve();\n  }, error => {\n    const messageResponse = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    const message = {\n      text: messageResponse,\n      variant: \"danger\"\n    };\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const LoggedInUser = data => dispatch => {\n  dispatch({\n    type: USER_DATA,\n    payload: {\n      user: data\n    }\n  });\n};\nexport const UpdateUser = data => dispatch => {\n  return UserService.setUserProfile(data).then(response => {\n    dispatch({\n      type: UPDATE_USER,\n      payload: {\n        user: response\n      }\n    });\n    const message = {\n      text: response.message,\n      variant: \"success\"\n    };\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.resolve();\n  }, error => {\n    const _content = error.response && error.response.data && error.response.data.message || error.message || error.toString(); // console.log(error.response.data['profile_image'][0]);\n\n\n    const message = {\n      text: _content,\n      variant: \"danger\"\n    };\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return _content;\n  });\n};\nexport const UpdateUserImage = data => dispatch => {\n  return UserService.setUserImage(data).then(response => {\n    dispatch({\n      type: UPDATE_USER,\n      payload: {\n        user: response\n      }\n    });\n    const message = {\n      text: response.message,\n      variant: \"success\"\n    };\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.resolve();\n  }, error => {\n    const _content = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n\n    const message = {\n      text: _content,\n      variant: \"danger\"\n    };\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return _content;\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/xampp/htdocs/Laravel-React/rea/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","USER_DATA","UPDATE_USER","SET_MESSAGE","AuthService","UserService","register","username","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","text","variant","messageResponse","LoggedInUser","UpdateUser","setUserProfile","_content","UpdateUserImage","setUserImage","logout"],"mappings":"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","sourcesContent":["import {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  USER_DATA,\r\n  UPDATE_USER,\r\n  SET_MESSAGE,\r\n} from \"./type\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\nimport UserService from \"../services/user.service\";\r\n\r\nexport const register = (username, email, password) => (dispatch) => {\r\n  return AuthService.register(username, email, password).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: response.data.message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const message =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const login = (username, password) => (dispatch) => {\r\n  return AuthService.login(username, password).then(\r\n    (data) => {\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: { user: data },\r\n      });\r\n\r\n      const message = {\r\n        text: \"LoggedIn Success.\",\r\n        variant: \"success\"\r\n      }\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const messageResponse =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString();\r\n\r\n      const message = {\r\n        text: messageResponse,\r\n        variant: \"danger\"\r\n      }\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.reject();\r\n    }\r\n  );\r\n};\r\n\r\nexport const LoggedInUser = (data) => (dispatch) => {\r\n  dispatch({\r\n    type: USER_DATA,\r\n    payload: { user: data },\r\n  });\r\n};\r\n\r\nexport const UpdateUser = (data) => (dispatch) => {\r\n  return UserService.setUserProfile(data).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: UPDATE_USER,\r\n        payload: { user: response },\r\n      })\r\n      const message = {\r\n        text: response.message,\r\n        variant: \"success\"\r\n      }\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n\r\n      return Promise.resolve();\r\n\r\n    },\r\n    (error) => {\r\n      const _content =\r\n      (error.response &&\r\n        error.response.data &&\r\n        error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n// console.log(error.response.data['profile_image'][0]);\r\n        const message = {\r\n          text: _content,\r\n          variant: \"danger\"\r\n        }\r\n  \r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n\r\n      return _content;\r\n    }\r\n  );\r\n};\r\n\r\nexport const UpdateUserImage = (data) => (dispatch) => {\r\n  return UserService.setUserImage(data).then(\r\n    (response) => {\r\n      dispatch({\r\n        type: UPDATE_USER,\r\n        payload: { user: response },\r\n      })\r\n      const message = {\r\n        text: response.message,\r\n        variant: \"success\"\r\n      }\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: message,\r\n      });\r\n\r\n      return Promise.resolve();\r\n    },\r\n    (error) => {\r\n      const _content =\r\n      (error.response &&\r\n        error.response.data &&\r\n        error.response.data.message) ||\r\n      error.message ||\r\n      error.toString();\r\n        const message = {\r\n          text: _content,\r\n          variant: \"danger\"\r\n        }\r\n  \r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n\r\n      return _content;\r\n    }\r\n  );\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  AuthService.logout();\r\n\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}